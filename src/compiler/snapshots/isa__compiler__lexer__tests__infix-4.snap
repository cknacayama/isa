---
source: src/compiler/lexer.rs
expression: "Lexer :: new(0, \"a + ((c ^^ []) >>= 'd')\").collect :: < Vec < _ >> ()"
---
[
    Ok(
        Spand {
            data: Ident(
                "a",
            ),
            span: SpanData { file_id: 0, start: 0, end: 1 },
        },
    ),
    Ok(
        Spand {
            data: Operator(
                "+",
            ),
            span: SpanData { file_id: 0, start: 2, end: 3 },
        },
    ),
    Ok(
        Spand {
            data: LParen,
            span: SpanData { file_id: 0, start: 4, end: 5 },
        },
    ),
    Ok(
        Spand {
            data: LParen,
            span: SpanData { file_id: 0, start: 5, end: 6 },
        },
    ),
    Ok(
        Spand {
            data: Ident(
                "c",
            ),
            span: SpanData { file_id: 0, start: 6, end: 7 },
        },
    ),
    Ok(
        Spand {
            data: Operator(
                "^^",
            ),
            span: SpanData { file_id: 0, start: 8, end: 10 },
        },
    ),
    Ok(
        Spand {
            data: LBracket,
            span: SpanData { file_id: 0, start: 11, end: 12 },
        },
    ),
    Ok(
        Spand {
            data: RBracket,
            span: SpanData { file_id: 0, start: 12, end: 13 },
        },
    ),
    Ok(
        Spand {
            data: RParen,
            span: SpanData { file_id: 0, start: 13, end: 14 },
        },
    ),
    Ok(
        Spand {
            data: Operator(
                ">>=",
            ),
            span: SpanData { file_id: 0, start: 15, end: 18 },
        },
    ),
    Ok(
        Spand {
            data: Char(
                100,
            ),
            span: SpanData { file_id: 0, start: 19, end: 22 },
        },
    ),
    Ok(
        Spand {
            data: RParen,
            span: SpanData { file_id: 0, start: 22, end: 23 },
        },
    ),
]
