---
source: src/compiler/lexer.rs
expression: "Lexer :: new(0, r\"(>>=) (None) \\x -> return x\").collect :: < Vec < _ >> ()"
---
[
    Ok(
        Spand {
            data: LParen,
            span: SpanData { file_id: 0, start: 0, end: 1 },
        },
    ),
    Ok(
        Spand {
            data: Operator(
                ">>=",
            ),
            span: SpanData { file_id: 0, start: 1, end: 4 },
        },
    ),
    Ok(
        Spand {
            data: RParen,
            span: SpanData { file_id: 0, start: 4, end: 5 },
        },
    ),
    Ok(
        Spand {
            data: LParen,
            span: SpanData { file_id: 0, start: 6, end: 7 },
        },
    ),
    Ok(
        Spand {
            data: Ident(
                "None",
            ),
            span: SpanData { file_id: 0, start: 7, end: 11 },
        },
    ),
    Ok(
        Spand {
            data: RParen,
            span: SpanData { file_id: 0, start: 11, end: 12 },
        },
    ),
    Ok(
        Spand {
            data: Backslash,
            span: SpanData { file_id: 0, start: 13, end: 14 },
        },
    ),
    Ok(
        Spand {
            data: Ident(
                "x",
            ),
            span: SpanData { file_id: 0, start: 14, end: 15 },
        },
    ),
    Ok(
        Spand {
            data: Arrow,
            span: SpanData { file_id: 0, start: 16, end: 18 },
        },
    ),
    Ok(
        Spand {
            data: Ident(
                "return",
            ),
            span: SpanData { file_id: 0, start: 19, end: 25 },
        },
    ),
    Ok(
        Spand {
            data: Ident(
                "x",
            ),
            span: SpanData { file_id: 0, start: 26, end: 27 },
        },
    ),
]
