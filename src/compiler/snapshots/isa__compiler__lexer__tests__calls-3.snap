---
source: src/compiler/lexer.rs
expression: "Lexer :: new(0, r\"(>>=) (None) \\x -> return x\").collect :: < Vec < _ >> ()"
---
[
    Ok(
        Spand {
            data: LParen,
            span: SpanData { file_id: 0, lo: 0, hi: 1 },
        },
    ),
    Ok(
        Spand {
            data: Operator(
                ">>=",
            ),
            span: SpanData { file_id: 0, lo: 1, hi: 4 },
        },
    ),
    Ok(
        Spand {
            data: RParen,
            span: SpanData { file_id: 0, lo: 4, hi: 5 },
        },
    ),
    Ok(
        Spand {
            data: LParen,
            span: SpanData { file_id: 0, lo: 6, hi: 7 },
        },
    ),
    Ok(
        Spand {
            data: Ident(
                "None",
            ),
            span: SpanData { file_id: 0, lo: 7, hi: 11 },
        },
    ),
    Ok(
        Spand {
            data: RParen,
            span: SpanData { file_id: 0, lo: 11, hi: 12 },
        },
    ),
    Ok(
        Spand {
            data: Backslash,
            span: SpanData { file_id: 0, lo: 13, hi: 14 },
        },
    ),
    Ok(
        Spand {
            data: Ident(
                "x",
            ),
            span: SpanData { file_id: 0, lo: 14, hi: 15 },
        },
    ),
    Ok(
        Spand {
            data: Arrow,
            span: SpanData { file_id: 0, lo: 16, hi: 18 },
        },
    ),
    Ok(
        Spand {
            data: Ident(
                "return",
            ),
            span: SpanData { file_id: 0, lo: 19, hi: 25 },
        },
    ),
    Ok(
        Spand {
            data: Ident(
                "x",
            ),
            span: SpanData { file_id: 0, lo: 26, hi: 27 },
        },
    ),
]
