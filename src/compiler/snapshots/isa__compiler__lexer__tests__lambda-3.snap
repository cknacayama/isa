---
source: src/compiler/lexer.rs
expression: "Lexer :: new(0, r\"\\_ -> 10 + (\\x -> x) 10\").collect :: < Vec < _ >> ()"
---
[
    Ok(
        Spand {
            data: Backslash,
            span: SpanData { file_id: 0, start: 0, end: 1 },
        },
    ),
    Ok(
        Spand {
            data: Underscore,
            span: SpanData { file_id: 0, start: 1, end: 2 },
        },
    ),
    Ok(
        Spand {
            data: Arrow,
            span: SpanData { file_id: 0, start: 3, end: 5 },
        },
    ),
    Ok(
        Spand {
            data: Integer(
                10,
            ),
            span: SpanData { file_id: 0, start: 6, end: 8 },
        },
    ),
    Ok(
        Spand {
            data: Operator(
                "+",
            ),
            span: SpanData { file_id: 0, start: 9, end: 10 },
        },
    ),
    Ok(
        Spand {
            data: LParen,
            span: SpanData { file_id: 0, start: 11, end: 12 },
        },
    ),
    Ok(
        Spand {
            data: Backslash,
            span: SpanData { file_id: 0, start: 12, end: 13 },
        },
    ),
    Ok(
        Spand {
            data: Ident(
                "x",
            ),
            span: SpanData { file_id: 0, start: 13, end: 14 },
        },
    ),
    Ok(
        Spand {
            data: Arrow,
            span: SpanData { file_id: 0, start: 15, end: 17 },
        },
    ),
    Ok(
        Spand {
            data: Ident(
                "x",
            ),
            span: SpanData { file_id: 0, start: 18, end: 19 },
        },
    ),
    Ok(
        Spand {
            data: RParen,
            span: SpanData { file_id: 0, start: 19, end: 20 },
        },
    ),
    Ok(
        Spand {
            data: Integer(
                10,
            ),
            span: SpanData { file_id: 0, start: 21, end: 23 },
        },
    ),
]
