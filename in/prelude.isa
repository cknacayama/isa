module Prelude

type Ordering = Less | Equal | Greater;

class Add a = val add: a -> a -> a;

class Sub a = val sub: a -> a -> a;

class Mul a = val mul: a -> a -> a;

class Div a =
    val div: a -> a -> a,
    val rem: a -> a -> a,
;

class Neg a = val neg: a -> a;

class Not a = val not: a -> a;

class And a = val and: a -> a -> bool;

class Or a = val or: a -> a -> bool;

class Eq a =
    val eq: a -> a -> bool,
    val ne: a -> a -> bool,
    let ne a b = ! Eq::eq a b,
;

class {Eq a} => Cmp a =
    val cmp: a -> a -> Ordering,
    val gt:  a -> a -> bool,
    val lt:  a -> a -> bool,
    val ge:  a -> a -> bool,
    val le:  a -> a -> bool,

    let gt a b = match Cmp::cmp a b with
        Greater -> true,
        _ -> false,
    ,

    let lt a b = match Cmp::cmp a b with
        Less -> true,
        _ -> false,
    ,

    let le a b = match Cmp::cmp a b with
        Less | Equal -> true,
        _ -> false,
    ,

    let ge a b = match Cmp::cmp a b with
        Greater | Equal -> true,
        _ -> false,
    ,
;

class {Cmp a, Add a, Sub a, Mul a, Div a, Neg a} => 
    Number a = val from_int: int -> a;
