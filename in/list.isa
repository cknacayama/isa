module Monad

class Monad f =
    val {a} => return: a -> f a,
    val {a,b} => bind: f a -> (a -> f b) -> f b,
;

module List

type List a = Nil | Cons a (List a);

instance Monad List =
    let return a = Cons a Nil,
    let bind list f = match list with
        Nil -> Nil,
        Cons a list -> append (f a) (bind list f),
;

val {a} => append: List a -> List a -> List a;
let append l1 l2 = match (l1,l2) with
    (Nil, list) -> list,
    (Cons a list, l2) -> Cons a (append list l2)
;

val {a} => lenght: List a -> int;
let lenght list = match list with
    Nil -> 0,
    Cons _ list -> 1 + lenght list,
;

val {a} => head: List a -> Option a;
let head list = match list with
    Nil -> None,
    Cons v _ -> Some v,
;

val {a} => tail: List a -> Option a;
let tail list = match list with
    Nil -> None,
    Cons v Nil -> Some v,
    Cons _ rest -> tail rest,
;

module Option

type Option a = None | Some a;

instance Monad Option =
    let return a = Some a,

    let bind opt f = match opt with
       Some a -> f a,
       None -> None,
;
