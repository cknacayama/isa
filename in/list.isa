module List
    type List a = Nil | Cons a (List a);
    
    val return a: a -> List a;
    let return v = Cons v Nil;

    val lenght a: List a -> int;
    let lenght list =
        match list with
            Nil -> 0,
            Cons _ list -> 1 + lenght list,
    ;

    val head a: List a -> Option.Option a;
    let head list =
        match list with
            Nil -> Option.None,
            Cons v _ -> Option.Some v,
        ;

    val tail a: List a -> Option.Option a;
    let tail list =
        match list with
            Nil -> Option.None,
            Cons v Nil -> Option.Some v,
            Cons _ rest -> tail rest,
        ;

module Option

    type Option a = None | Some a;
    
    val return a: a -> Option a;
    let return a = Some a;
    
    val bind a b: Option a -> (a -> Option b) -> Option b;
    let bind opt f = 
        match opt with
            Some a -> f a,
            None -> None,
        ;
