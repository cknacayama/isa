module @prelude with {
    option::_,
    result::_,
    monad::_,
    ops::_,
    list::_,
}

val {a,b} => const: a -> b -> a;
let const a b = a;

val {a} => id: a -> a;
let id a = a;

instance Add int = let add a b = a + b;
instance Sub int = let sub a b = a - b;
instance Mul int = let mul a b = a * b;
instance Div int = 
    let div a b = a / b,
    let rem a b = a % b,
;
instance Neg int = let neg a = -a;
instance Eq int = let eq a b = a == b;
instance Cmp int = 
    let cmp a b = 
        if a == b then 
            Ordering::Equal
        else if a > b then
            Ordering::Greater 
        else
            Ordering::Less
;
instance Number int = let from_int a = a;

instance And bool = let and a b = a && b;
instance Or bool = let or a b = a || b;
instance Not bool = let not a = !a;
