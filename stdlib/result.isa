module @result with {monad::_, result::Result::_}

type Result e a = Err e | Ok a;

instance {e} Result e: Functor =
    let fmap f res = match res with
        Ok a -> Ok $ f a,
        Err e -> Err e,
;

instance {e} Result e: Applicative =
    let pure = Ok,
    let (<*>) f x = match (f,x) with
        (Ok f, Ok x) -> Ok $ f x,
        (Err e, _) |
        (_, Err e) -> Err e,
;

instance {e} Result e: Monad =
    let (>>=) res f = match res with
        Ok a -> f a,
        Err e -> Err e,
;
