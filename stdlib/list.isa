module @list with {ops::_, monad::_, option::_}

type List a = Nil | Cons a (List a);

val {a} => lenght: List a -> int;
let lenght a = match a with
    [] -> 0,
    [_]rest -> 1 + lenght rest
;

val {a} => head: List a -> Option a;
let head a = match a with
    [] -> None,
    [a]_ -> Some a,
;

val {a} => last: List a -> Option a;
let last a = match a with
    [] -> None,
    [a] -> Some a,
    [_]rest -> last rest,
;

val {a} => tail: List a -> List a;
let tail a = match a with
    [] -> [],
    [_]rest -> rest,
;

instance Functor List =
    let fmap f a = match a with
        [] -> [],
        [a]rest -> f a & (f <$> rest),
;

instance Applicative List =
    let pure a = [a],
    let (<*>) f a = match (f,a) with
        ([f]restf, [a]resta) -> f a & (restf <*> resta),
        _ -> [],
;

instance Monad List =
    let (>>=) a f = match a with
        [] -> [],
        [a]rest -> f a ++ (rest >>= f),
;

instance {a, Eq a} => Eq List a =
    let (==) a b = match (a,b) with
        ([], []) -> true,
        ([a]resta, [b]restb) -> a == b && resta == restb,
        _ -> false,
;

infixr 5 {a} => (++): List a -> List a -> List a;
infixr 5 {a} => (&): a -> List a -> List a;
