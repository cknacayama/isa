module @ops

type Ordering = Less | Equal | Greater;

class Add = infixl 6 (+): Self -> Self -> Self;

class Sub = infixl 6 (-): Self -> Self -> Self;

class Mul = infixl 7 (*): Self -> Self -> Self;

class Div =
    infixl 7 (/): Self -> Self -> Self,
    infixl 7 (%): Self -> Self -> Self,
;

class Pow =
    infixr 8 (^): Self -> int -> Self,
    infixr 8 (^^): Self -> real -> Self,
;

class Neg = prefix 10 (-): Self -> Self;

class Not = prefix 10 (!): Self -> bool;

class And = infixr 3 (&&): Self -> Self -> bool;

class Or = infixr 2 (||): Self -> Self -> bool;

class Eq =
    infix 4 (==): Self -> Self -> bool,
    infix 4 (!=): Self -> Self -> bool,

    let (!=) a = (!) . (==) a,
;

class Cmp: Eq =
    val cmp: Self -> Self -> Ordering,

    infix 4 (>):  Self -> Self -> bool,
    infix 4 (<):  Self -> Self -> bool,
    infix 4 (>=):  Self -> Self -> bool,
    infix 4 (<=):  Self -> Self -> bool,

    let (>) a b = match Cmp::cmp a b with
        Ordering::Greater -> true,
        _ -> false,
    ,

    let (<) a b = match Cmp::cmp a b with
        Ordering::Less -> true,
        _ -> false,
    ,

    let (<=) a b = match Cmp::cmp a b with
        Ordering::Less | Ordering::Equal -> true,
        _ -> false,
    ,

    let (>=) a b = match Cmp::cmp a b with
        Ordering::Greater | Ordering::Equal -> true,
        _ -> false,
    ,
;

class Number: {Cmp, Add, Sub, Mul, Div, Pow, Neg} = 
    val from_int: int -> Self,
    val from_real: real -> Self,
;

instance Ordering: Eq =
    let (==) a b = match (a,b) with
        (Ordering::Less, Ordering::Less) 
        | (Ordering::Equal, Ordering::Equal) 
        | (Ordering::Greater, Ordering::Greater) -> true,
        _ -> false,
;

val {a: Cmp} max: a -> a -> a;
let max x y = if x <= y then y else x;

val {a: Cmp} min: a -> a -> a;
let min x y = if x <= y then x else y;
